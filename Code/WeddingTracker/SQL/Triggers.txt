/* ---------------------------------------------------------------------------------------
	TRIGGERS 
 --------------------------------------------------------------------------------------- */


DROP TRIGGER IF EXISTS test_trig_insert;
DROP TRIGGER IF EXISTS test_trig_update;
DROP TRIGGER IF EXISTS test_trig_delete;
DROP TRIGGER IF EXISTS timeline_update_totaltime;
DROP TRIGGER IF EXISTS timeline_delete_totaltime;

commit;

DELIMETER |

/* On insert into TIME_CHUNK, set TIMELINE(TOTALTIME) + NEW.duration */
CREATE TRIGGER test_trig_insert
BEFORE INSERT ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = NEW.EVENTID;

      		UPDATE timeline 
		SET totaltime = ADDTIME(NEW.duration, _oldTime)
		WHERE timeline.EVENTID = NEW.EVENTID;

		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = NEW.EVENTID;

      		UPDATE EVENT
		SET DURATION = _oldTime
		WHERE EVENT.EVENTID = NEW.EVENTID;
        END;
 |


/* On update into TIME_CHUNK, set TIMELINE(TOTALTIME) + NEW.duration - OLD.duration */
CREATE TRIGGER test_trig_update
BEFORE UPDATE ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = NEW.EVENTID;

      		UPDATE timeline 
		SET totaltime = ADDTIME(NEW.duration, _oldTime)
		WHERE timeline.EVENTID = NEW.EVENTID;

		UPDATE timeline 
		SET totaltime = SUBTIME(totaltime, OLD.duration)
		WHERE timeline.EVENTID = NEW.EVENTID;

		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = NEW.EVENTID;

      		UPDATE EVENT
		SET DURATION = _oldTime
		WHERE EVENT.EVENTID = NEW.EVENTID;
        END;
 |


/* On delete into TIME_CHUNK, set TIMELINE(TOTALTIME) - OLD.duration */
CREATE TRIGGER test_trig_delete
BEFORE DELETE ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = OLD.EVENTID;

      		UPDATE timeline 
		SET totaltime = SUBTIME(_oldTime, OLD.duration)
		WHERE timeline.EVENTID = OLD.EVENTID;

		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = OLD.EVENTID;

      		UPDATE EVENT
		SET DURATION = _oldTime
		WHERE EVENT.EVENTID = OLD.EVENTID;
        END;
 |
DELIMETER ;





CREATE TRIGGER timeline_update_totaltime
AFTER UPDATE ON TIMELINE
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT EVENT.DURATION
		INTO _oldTime
		FROM EVENT
		WHERE EVENT.EVENTID = NEW.EVENTID;

      		UPDATE EVENT 
		SET EVENT.DURATION = NEW.TOTALTIME
		WHERE EVENT.EVENTID = NEW.EVENTID;
        END;
 |

CREATE TRIGGER timeline_delete_totaltime
AFTER DELETE ON TIMELINE
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT EVENT.DURATION
		INTO _oldTime
		FROM EVENT
		WHERE EVENT.EVENTID = EVENTID;

      		UPDATE EVENT 
		SET DURATION = SEC_TO_TIME(0)
		WHERE EVENT.EVENTID = EVENTID;
        END;
 |

SELECT * FROM TIMELINE;

INSERT INTO timeline VALUES (DEFAULT,'N','12:10:00',DEFAULT);
SELECT * FROM TIMELINE;

INSERT INTO time_chunk VALUES (DEFAULT,3,'12:10:00','00:15:00');
SELECT * FROM TIMELINE;

INSERT INTO time_chunk VALUES (DEFAULT,3,'12:40:00','00:10:00');
SELECT * FROM TIMELINE;

UPDATE time_chunk
SET DURATION = '0:0:0'
WHERE ID = 4;
SELECT * FROM TIMELINE;

DELETE FROM time_chunk
WHERE ID = 3;
SELECT * FROM TIMELINE;



 COMMIT;





















/* On insert into TIME_CHUNK, set TIMELINE(TOTALTIME) + NEW.duration */
CREATE TRIGGER test_trig_insert
AFTER INSERT ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.EVENTID = NEW.EVENTID;

      		UPDATE timeline 
		SET totaltime = ADDTIME(NEW.duration, _oldTime)
		WHERE timeline.EVENTID = NEW.EVENTID;
        END;
 |
DELIMETER ;


