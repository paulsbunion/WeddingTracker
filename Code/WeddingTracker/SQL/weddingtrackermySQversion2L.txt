/*  ---------------------------------------------------------------------------------------
	drop potential conflicting indexes and tables
 --------------------------------------------------------------------------------------- */

DROP	TABLE	IF EXISTS	PHOTOGRAPHERLOCATIONS;
DROP	TABLE	IF EXISTS	TIME_CHUNK;
DROP	TABLE	IF EXISTS	TIMELINE;
DROP	TABLE	IF EXISTS	CLIENT;
DROP	TABLE	IF EXISTS	ASSIGNED_STAFF;
DROP	TABLE	IF EXISTS	EVENT;
DROP	TABLE	IF EXISTS	EVENTTYPE;
DROP	TABLE	IF EXISTS	LOCATION;
DROP	TABLE	IF EXISTS	PHOTOGRAPHER;

/* ---------------------------------------------------------------------------------------
	create the database tables
 --------------------------------------------------------------------------------------- */

CREATE TABLE PHOTOGRAPHER (
	ID			INT		NOT NULL		AUTO_INCREMENT,
	FIRSTNAME		VARCHAR(20)	NOT NULL,
	LASTNAME		VARCHAR(25)	NOT NULL,
	
	PRIMARY KEY (ID)
);

CREATE TABLE LOCATION (
	ID			INT		NOT NULL		AUTO_INCREMENT,
	CITY			VARCHAR(30)	NOT NULL,
	STATE			CHAR(2)		NOT NULL		DEFAULT 'OH',
	ZIP			CHAR(5)		NOT NULL,
	ADDRESS			VARCHAR(30)	NOT NULL,
	DESCRIPTION		VARCHAR(100)	NOT NULL		DEFAULT 'N/A',

	PRIMARY KEY (ID)
);

CREATE TABLE EVENTTYPE (
	ID			INT		NOT NULL,
	EVENTTYPE		VARCHAR(100)	NOT NULL		DEFAULT 'EVENT',
	BASECOST		VARCHAR(8)	DEFAULT 'N/A'		NOT NULL,

	PRIMARY KEY (ID)
);

CREATE TABLE EVENT (
	ID			INT		NOT NULL		AUTO_INCREMENT,
	EVENTNAME		VARCHAR(100)	NOT NULL		DEFAULT 'NAMELESS EVENT',
	TYPE			INT		NOT NULL,
	EVENTDATE		DATE		NOT NULL,
	STARTTIME		TIME		NOT NULL,
	DURATION		TIME		DEFAULT '0:00:00'	NOT NULL,
	TIMELINE		INT		DEFAULT NULL,
	MULTICLIENT		CHAR(1)		DEFAULT 'N' 		NOT NULL,
	EXTRACOST		VARCHAR(8)	DEFAULT '$0.00'		NOT NULL,		
	NOTES			TEXT		NOT NULL,
	MULTISTAFF		CHAR(1)		DEFAULT 'N' 		NOT NULL,
	
	PRIMARY KEY (ID),
	FOREIGN KEY (TYPE) REFERENCES EVENTTYPE(ID),
	CONSTRAINT CHK_MUL_CLI CHECK (MULTICLIENT = 'Y' OR MULTICLIENT = 'N')
);

CREATE TABLE EVENTLOCATIONS (
	EVENTID			INT		NOT NULL,
	LOCATIONID		INT		NOT NULL,

	PRIMARY KEY (EVENTID, LOCATIONID),
	FOREIGN KEY (EVENTID) REFERENCES EVENT(ID),
	FOREIGN KEY (LOCATIONID) REFERENCES LOCATION(ID)
);

CREATE TABLE EVENT_PHOTOGRAPHERS (
	
	EVENTID			INT		NOT NULL,
	STAFFID			INT		NOT NULL,
	ISMAINPHOTOGRAPHER	CHAR(1) 	NOT NULL,

	PRIMARY KEY (EVENTID, STAFFID),
	FOREIGN KEY (EVENTID) REFERENCES EVENT(ID),
	FOREIGN KEY (STAFFID) REFERENCES PHOTOGRAPHER(ID),		
	CONSTRAINT CHK_OWNER CHECK (ISEVENTOWNER = 'Y' OR ISEVENTOWNER = 'N')
);

CREATE TABLE CLIENT (
	ID			INT		NOT NULL		AUTO_INCREMENT,
	FIRSTNAME		VARCHAR(20)	NOT NULL,
	LASTNAME		VARCHAR(25)	NOT NULL,
	ADDRESS			VARCHAR(100)	NOT NULL,
	PHONENUM		CHAR(14)	NOT NULL,
	EMAIL			VARCHAR(50),
	AUTOREMIND		CHAR(1)		NOT NULL		DEFAULT 'N',

	PRIMARY KEY (ID)
);

CREATE TABLE EVENT_CLIENTS (
	EVENTID			INT		NOT NULL,
	CLIENTID		INT		NOT NULL,
	
	PRIMARY KEY (EVENTID, CLIENTID),
	FOREIGN KEY (EVENTID) REFERENCES EVENT(ID),
	FOREIGN KEY (CLIENTID) REFERENCES CLIENT(ID)
);

CREATE TABLE TIMELINE (
	ID			INT		NOT NULL		AUTO_INCREMENT,
	MULTILOCATION		CHAR(1)		NOT NULL		DEFAULT 'N',
	STARTTIME		TIME		NOT NULL,
	TOTALTIME		TIME		NOT NULL		DEFAULT '0:0:0',

	PRIMARY KEY (ID)
);

CREATE TABLE TIME_CHUNK (
	ID			INT		NOT NULL		AUTO_INCREMENT,
	TIMELINEID		INT 		NOT NULL,
	STARTTIME		TIME		NOT NULL,
	DURATION		TIME		NOT NULL,

	PRIMARY KEY (ID),
	FOREIGN KEY (TIMELINEID) REFERENCES TIMELINE(ID)
);

CREATE TABLE PHOTOGRAPHERLOCATIONS (
	STAFFID			INT		NOT NULL,
	LOCATION		INT		NOT NULL,
	CHUNKID			INT 		NOT NULL,

	PRIMARY KEY (STAFFID, CHUNKID),
	FOREIGN KEY (STAFFID) REFERENCES PHOTOGRAPHER(ID),
	FOREIGN KEY (LOCATION) REFERENCES LOCATION(ID),
	FOREIGN KEY (CHUNKID) REFERENCES TIME_CHUNK(ID)
);


/* ---------------------------------------------------------------------------------------
	TRIGGERS 
 --------------------------------------------------------------------------------------- */

DELIMITER /

/* On insert into TIME_CHUNK, set TIMELINE(TOTALTIME) */
CREATE OR REPLACE TRIGGER TIME_CHUNK_TRIGGER
BEFORE INSERT ON TIME_CHUNK
FOR EACH ROW
	DECLARE
		v_oldTime TIME;
		v_oldId   INT;
	BEGIN
		/* update the current timelines total time */
		SELECT TIMELINE.TOTALTIME, TIMELINE.ID INTO v_oldTime, v_oldId
		FROM TIMELINE
		WHERE TIMELINE.ID = :NEW.TIMELINEID;

		/* if old time null but valid id, use this time */
		IF v_oldId NOT NULL AND v_oldTime IS NULL
		THEN
			UPDATE TIMELINE
			SET TIMELINE.TOTALTIME = :NEW.DURATION
			WHERE TIMELINE.ID = :NEW.TIMELINEID;
		ELSIF v_oldId NOT NULL
		THEN
			UPDATE TIMELINE
			SET TIMELINE.TOTALTIME = v_oldTime + :NEW.DURATION;
		END IF;
	END;
 /
DELIMETER ;



DROP TRIGGER IF EXISTS test_trig;
commit;

DELIMETER |

/* On insert into TIME_CHUNK, set TIMELINE(TOTALTIME) + NEW.duration */
CREATE TRIGGER test_trig_insert
BEFORE INSERT ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.ID = NEW.TIMELINEID;

      		UPDATE timeline 
		SET totaltime = NEW.duration + _oldTime
		WHERE timeline.ID = NEW.TIMELINEID;
        END;
 |
DELIMETER ;



DELIMETER |

/* On update into TIME_CHUNK, set TIMELINE(TOTALTIME) + NEW.duration - OLD.duration */
CREATE TRIGGER test_trig_update
BEFORE UPDATE ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.ID = NEW.TIMELINEID;

      		UPDATE timeline 
		SET totaltime = NEW.duration + _oldTime - OLD.duration
		WHERE timeline.ID = NEW.TIMELINEID;
        END;
 |
DELIMETER ;


DELIMETER |

/* On delete into TIME_CHUNK, set TIMELINE(TOTALTIME) - OLD.duration */
CREATE TRIGGER test_trig_delete
BEFORE DELETE ON TIME_CHUNK
FOR EACH ROW
	BEGIN
	DECLARE _oldTime TIME;
		
		SELECT TIMELINE.TOTALTIME
		INTO _oldTime
		FROM TIMELINE
		WHERE TIMELINE.ID = OLD.TIMELINEID;

      		UPDATE timeline 
		SET totaltime = _oldTime - OLD.duration
		WHERE timeline.ID = OLD.TIMELINEID;
        END;
 |
DELIMETER ;

SELECT * FROM TIMELINE;

INSERT INTO timeline VALUES (DEFAULT,'N','12:10:00',DEFAULT);
SELECT * FROM TIMELINE;

INSERT INTO time_chunk VALUES (DEFAULT,3,'12:10:00','00:15:00');
SELECT * FROM TIMELINE;

INSERT INTO time_chunk VALUES (DEFAULT,3,'12:40:00','00:10:00');
SELECT * FROM TIMELINE;

UPDATE time_chunk
SET DURATION = '0:0:0'
WHERE ID = 4;
SELECT * FROM TIMELINE;

DELETE FROM time_chunk
WHERE ID = 3;
SELECT * FROM TIMELINE;



 COMMIT;